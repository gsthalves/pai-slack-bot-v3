#!/usr/bin/env python3
"""
Exemplos específicos de uso do parser de eventos da API Cortex Agents
Baseado na documentação oficial: https://docs.snowflake.com/en/user-guide/snowflake-cortex/cortex-agents-rest-api#response
"""

import json
from snowflake_cortex_client import CortexResponseParser, CortexAgentEvent

def example_text_response():
    """
    Exemplo de resposta apenas com texto
    """
    print("\n" + "="*60)
    print("EXEMPLO 1: RESPOSTA APENAS COM TEXTO")
    print("="*60)
    
    sample_response = '''event: message.delta
data: {"id": "msg_001", "object": "message.delta", "delta": {"content": [{"index": 0, "type": "text", "text": "Olá! Eu sou o Cortex Agent e posso ajudar você com análises de dados."}]}}

event: message.delta
data: {"id": "msg_002", "object": "message.delta", "delta": {"content": [{"index": 0, "type": "text", "text": " Como posso ajudá-lo hoje?"}]}}'''
    
    events = CortexResponseParser.parse_streaming_response(sample_response)
    final_response = CortexResponseParser.extract_final_response(events)
    
    print(f"Eventos parseados: {len(events)}")
    print(f"Texto final: '{final_response['text']}'")

def example_tool_use_and_results():
    """
    Exemplo com uso de ferramentas e resultados
    """
    print("\n" + "="*60)
    print("EXEMPLO 2: USO DE FERRAMENTAS E RESULTADOS")
    print("="*60)
    
    sample_response = '''event: message.delta
data: {"id": "msg_001", "object": "message.delta", "delta": {"content": [{"index": 0, "type": "tool_use", "tool_use": {"tool_use_id": "toolu_XXXXXX", "name": "analyst1", "input": {"messages": ["role:USER content:{text:{text:\\"What are the top three customers by revenue?\\"}}"], "model": "snowflake-hosted-semantic", "experimental": ""}}}]}}

event: message.delta
data: {"id": "msg_002", "object": "message.delta", "delta": {"content": [{"index": 0, "type": "tool_results", "tool_results": {"tool_use_id": "toolu_XXXXXX", "content": [{"type": "json", "json": {"suggestions": [], "sql": "WITH __customers AS (\\\\n  SELECT\\\\n    customer_id,\\\\n    revenue\\\\n  FROM user_database.user_schema.user_table\\\\n)\\\\nSELECT\\\\n  customer_id, revenue FROM __customers ORDER BY revenue DESC LIMIT 3\\\\n -- Generated by Cortex Analyst\\\\n;", "text": "This is our interpretation of your question:\\\\n\\\\n__What are the top three customers by revenue?\\\\n\\\\n"}}], "status": "success"}}]}}

event: message.delta
data: {"id": "msg_003", "object": "message.delta", "delta": {"content": [{"index": 0, "type": "tool_use", "tool_use": {"tool_use_id": "tool_002", "name": "sql_execution_tool", "input": {"sql": "WITH __customers AS (SELECT customer_id, revenue FROM user_database.user_schema.user_table) SELECT customer_id, revenue FROM __customers ORDER BY revenue DESC LIMIT 3"}}}]}}'''
    
    events = CortexResponseParser.parse_streaming_response(sample_response)
    final_response = CortexResponseParser.extract_final_response(events)
    
    print(f"Eventos parseados: {len(events)}")
    print(f"Ferramentas utilizadas: {len(final_response['tool_uses'])}")
    print(f"Resultados de ferramentas: {len(final_response['tool_results'])}")
    
    for i, tool_use in enumerate(final_response['tool_uses'], 1):
        print(f"\nFerramenta {i}:")
        print(f"  Nome: {tool_use['name']}")
        print(f"  ID: {tool_use['tool_use_id']}")
        if 'sql' in str(tool_use.get('input', {})):
            print(f"  SQL: {tool_use['input'].get('sql', 'N/A')[:100]}...")

def example_chart_response():
    """
    Exemplo com gráfico
    """
    print("\n" + "="*60)
    print("EXEMPLO 3: RESPOSTA COM GRÁFICO")
    print("="*60)
    
    sample_response = '''event: message.delta
data: {"id": "msg_001", "object": "message.delta", "delta": {"content": [{"index": 0, "type": "text", "text": "Baseado nos dados, aqui está um gráfico dos top clientes:"}]}}

event: message.delta
data: {"id": "msg_002", "object": "message.delta", "delta": {"content": [{"index": 0, "type": "chart", "chart": {"chart_spec": "{\\"$schema\\": \\"https://vega.github.io/schema/vega-lite/v5.json\\", \\"title\\": \\"Top 3 Customers by Revenue\\", \\"mark\\": \\"bar\\", \\"encoding\\": {\\"x\\": {\\"field\\": \\"customer_id\\", \\"type\\": \\"nominal\\", \\"sort\\": null}, \\"y\\": {\\"field\\": \\"revenue\\", \\"type\\": \\"quantitative\\"}}, \\"data\\": {\\"values\\": [{\\"customer_id\\": \\"A\\", \\"revenue\\": \\"1000\\"}, {\\"customer_id\\": \\"B\\", \\"revenue\\": \\"800\\"}]}}"}}]}}'''
    
    events = CortexResponseParser.parse_streaming_response(sample_response)
    final_response = CortexResponseParser.extract_final_response(events)
    
    print(f"Eventos parseados: {len(events)}")
    print(f"Texto: '{final_response['text']}'")
    print(f"Gráficos: {len(final_response['charts'])}")
    
    if final_response['charts']:
        chart = final_response['charts'][0]
        chart_spec = json.loads(chart['chart_spec'])
        print(f"\nDetalhes do gráfico:")
        print(f"  Título: {chart_spec.get('title', 'N/A')}")
        print(f"  Tipo: {chart_spec.get('mark', 'N/A')}")
        print(f"  Dados: {len(chart_spec.get('data', {}).get('values', []))} registros")

def example_error_response():
    """
    Exemplo com erro
    """
    print("\n" + "="*60)
    print("EXEMPLO 4: RESPOSTA COM ERRO")
    print("="*60)
    
    sample_response = '''event: error
data: {"code": "399505", "message": "Internal server error"}'''
    
    events = CortexResponseParser.parse_streaming_response(sample_response)
    final_response = CortexResponseParser.extract_final_response(events)
    
    print(f"Eventos parseados: {len(events)}")
    print(f"Erros encontrados: {len(final_response['errors'])}")
    
    if final_response['errors']:
        error = final_response['errors'][0]
        print(f"\nDetalhes do erro:")
        print(f"  Código: {error.get('code', 'N/A')}")
        print(f"  Mensagem: {error.get('message', 'N/A')}")

def example_mixed_response():
    """
    Exemplo com resposta mista (texto + ferramentas + gráfico)
    """
    print("\n" + "="*60)
    print("EXEMPLO 5: RESPOSTA MISTA COMPLETA")
    print("="*60)
    
    sample_response = '''event: message.delta
data: {"id": "msg_001", "object": "message.delta", "delta": {"content": [{"index": 0, "type": "text", "text": "Vou analisar os dados de vendas para você. "}]}}

event: message.delta
data: {"id": "msg_002", "object": "message.delta", "delta": {"content": [{"index": 0, "type": "tool_use", "tool_use": {"tool_use_id": "tool_001", "name": "DATA_BETA", "input": {"messages": ["role:USER content:{text:{text:\\"Analyze sales data\\"}}"], "model": "snowflake-hosted-semantic"}}}]}}

event: message.delta
data: {"id": "msg_003", "object": "message.delta", "delta": {"content": [{"index": 0, "type": "tool_results", "tool_results": {"tool_use_id": "tool_001", "status": "success", "content": [{"type": "json", "json": {"sql": "SELECT product, SUM(sales) as total_sales FROM sales_data GROUP BY product ORDER BY total_sales DESC", "text": "Query para análise de vendas"}}]}}]}}

event: message.delta
data: {"id": "msg_004", "object": "message.delta", "delta": {"content": [{"index": 0, "type": "text", "text": "Baseado na análise, aqui estão os resultados:"}]}}

event: message.delta
data: {"id": "msg_005", "object": "message.delta", "delta": {"content": [{"index": 0, "type": "chart", "chart": {"chart_spec": "{\\"$schema\\": \\"https://vega.github.io/schema/vega-lite/v5.json\\", \\"title\\": \\"Sales by Product\\", \\"mark\\": \\"bar\\", \\"encoding\\": {\\"x\\": {\\"field\\": \\"product\\", \\"type\\": \\"nominal\\"}, \\"y\\": {\\"field\\": \\"sales\\", \\"type\\": \\"quantitative\\"}}, \\"data\\": {\\"values\\": [{\\"product\\": \\"Product A\\", \\"sales\\": 1500}, {\\"product\\": \\"Product B\\", \\"sales\\": 1200}]}}"}}]}}'''
    
    events = CortexResponseParser.parse_streaming_response(sample_response)
    final_response = CortexResponseParser.extract_final_response(events)
    
    print(f"Eventos parseados: {len(events)}")
    print(f"Texto combinado: '{final_response['text']}'")
    print(f"Ferramentas utilizadas: {len(final_response['tool_uses'])}")
    print(f"Resultados de ferramentas: {len(final_response['tool_results'])}")
    print(f"Gráficos: {len(final_response['charts'])}")
    
    print("\nResumo da resposta:")
    print(f"  - {len(final_response['text'].split())} palavras no texto")
    print(f"  - {len(final_response['tool_uses'])} ferramenta(s) executada(s)")
    print(f"  - {len(final_response['charts'])} gráfico(s) gerado(s)")

def test_individual_event_methods():
    """
    Testa métodos individuais dos eventos
    """
    print("\n" + "="*60)
    print("EXEMPLO 6: TESTANDO MÉTODOS DOS EVENTOS")
    print("="*60)
    
    # Evento com texto
    text_event = CortexAgentEvent("message.delta", {
        "delta": {
            "content": [
                {"type": "text", "text": "Olá mundo!"}
            ]
        }
    })
    
    print(f"Evento de texto:")
    print(f"  É message.delta? {text_event.is_message_delta()}")
    print(f"  É erro? {text_event.is_error()}")
    print(f"  Texto: '{text_event.get_text_content()}'")
    
    # Evento com tool use
    tool_event = CortexAgentEvent("message.delta", {
        "delta": {
            "content": [
                {
                    "type": "tool_use",
                    "tool_use": {
                        "tool_use_id": "test_001",
                        "name": "test_tool",
                        "input": {"query": "SELECT 1"}
                    }
                }
            ]
        }
    })
    
    tool_use = tool_event.get_tool_use()
    print(f"\nEvento de ferramenta:")
    print(f"  Nome da ferramenta: {tool_use['name'] if tool_use else 'N/A'}")
    print(f"  ID: {tool_use['tool_use_id'] if tool_use else 'N/A'}")
    
    # Evento de erro
    error_event = CortexAgentEvent("error", {
        "code": "500",
        "message": "Erro de teste"
    })
    
    print(f"\nEvento de erro:")
    print(f"  É erro? {error_event.is_error()}")
    print(f"  Dados: {error_event.data}")

def main():
    """
    Executa todos os exemplos
    """
    print("🎯 EXEMPLOS DE USO DO PARSER DE EVENTOS CORTEX AGENTS")
    print("Baseado na documentação oficial do Snowflake")
    
    example_text_response()
    example_tool_use_and_results()
    example_chart_response()
    example_error_response()
    example_mixed_response()
    test_individual_event_methods()
    
    print("\n" + "="*60)
    print("TODOS OS EXEMPLOS CONCLUÍDOS")
    print("="*60)
    print("\nPara usar o parser em seu código:")
    print("1. from snowflake_cortex_client import CortexResponseParser")
    print("2. events = CortexResponseParser.parse_streaming_response(response_text)")
    print("3. final_response = CortexResponseParser.extract_final_response(events)")

if __name__ == "__main__":
    main() 