#!/usr/bin/env python3
"""
Exemplo demonstrando a nova funcionalidade de inclus√£o autom√°tica de dados tabulares
quando o Cortex Agent retorna "See the table with the related data"
"""

from snowflake_cortex_client import SnowflakeCortexClient

def example_table_integration():
    """
    Demonstra como dados tabulares s√£o automaticamente inclu√≠dos na resposta
    """
    print("üß™ EXEMPLO: INTEGRA√á√ÉO AUTOM√ÅTICA DE DADOS TABULARES")
    print("=" * 70)
    
    try:
        client = SnowflakeCortexClient()
        
        # Exemplos de perguntas que tipicamente retornam dados tabulares
        sample_questions = [
            "Quais s√£o os top 10 clientes por receita?",
            "Mostre os produtos mais vendidos por categoria",
            "Liste as vendas por regi√£o nos √∫ltimos 6 meses",
            "Quais funcion√°rios t√™m melhor performance?",
            "Mostre o faturamento mensal do √∫ltimo ano"
        ]
        
        print("üìã Perguntas que tipicamente referenciam tabelas:")
        for i, q in enumerate(sample_questions, 1):
            print(f"   {i}. {q}")
        
        print(f"\n" + "=" * 70)
        print("üî¨ TESTANDO COM PERGUNTA SAMPLE...")
        
        # Testa com primeira pergunta
        question = sample_questions[0]
        print(f"\n‚ùì Pergunta: {question}")
        
        response = client.chat(question)
        
        print(f"\nüìä AN√ÅLISE DA RESPOSTA:")
        print("-" * 50)
        
        text = response.get('text', '')
        
        # Analisa tipo de resposta
        if 'üìä **Dados da Consulta:**' in text:
            print("‚úÖ SUCESSO: Dados tabulares inclu√≠dos automaticamente!")
            
            # Conta linhas da tabela
            lines = text.split('\n')
            table_lines = [line for line in lines if line.startswith('|') and not line.startswith('|---')]
            if table_lines:
                print(f"üìà Tabela cont√©m aproximadamente {len(table_lines)-1} linhas de dados")
            
        elif any(ref in text.lower() for ref in ['see the table', 'tabela relacionada', 'dados da tabela', 'table with the related data']):
            print("‚ö†Ô∏è PROBLEMA: Resposta referencia tabela mas dados n√£o foram inclu√≠dos")
            print("üîç Frases encontradas que referenciam tabela:")
            for ref in ['see the table', 'tabela relacionada', 'dados da tabela', 'table with the related data']:
                if ref in text.lower():
                    print(f"   - '{ref}'")
        else:
            print("‚ÑπÔ∏è Resposta n√£o faz refer√™ncia direta a dados tabulares")
        
        # Informa√ß√µes t√©cnicas
        print(f"\nüîß INFORMA√á√ïES T√âCNICAS:")
        print(f"   - Query IDs: {len(response.get('query_ids', []))}")
        print(f"   - SQLs executados: {len(response.get('sqls_executed', []))}")
        print(f"   - Itera√ß√µes: {response.get('iterations_performed', 0)}")
        print(f"   - Follow-up: {response.get('follow_up_performed', False)}")
        
        print(f"\nüìÑ RESPOSTA COMPLETA:")
        print("=" * 70)
        print(text)
        print("=" * 70)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no exemplo: {str(e)}")
        return False

def explain_table_detection():
    """
    Explica como funciona a detec√ß√£o autom√°tica de tabelas
    """
    print("\nüß† COMO FUNCIONA A DETEC√á√ÉO AUTOM√ÅTICA DE TABELAS:")
    print("-" * 60)
    
    print("1Ô∏è‚É£ DETEC√á√ÉO DE REFER√äNCIAS:")
    print("   O sistema procura por frases como:")
    references = [
        "see the table",
        "tabela relacionada", 
        "dados da tabela",
        "consulte a tabela",
        "veja a tabela",
        "table with the related data"
    ]
    for ref in references:
        print(f"   - '{ref}'")
    
    print("\n2Ô∏è‚É£ BUSCA DE QUERY_ID:")
    print("   - Extrai query_id dos tool_results")
    print("   - Usa o query_id para buscar dados via RESULT_SCAN")
    
    print("\n3Ô∏è‚É£ FORMATA√á√ÉO:")
    print("   - Busca dados reais do Snowflake")
    print("   - Formata em tabela markdown leg√≠vel")
    print("   - Adiciona automaticamente ao texto da resposta")
    
    print("\n4Ô∏è‚É£ LIMITA√á√ïES:")
    print("   - M√°ximo 50 linhas por tabela (para n√£o sobrecarregar)")
    print("   - Largura m√°xima 30 caracteres por coluna")
    print("   - Funciona apenas com queries que retornam dados")

if __name__ == "__main__":
    print("üöÄ Executando exemplo de integra√ß√£o de tabelas...")
    
    success = example_table_integration()
    
    if success:
        explain_table_detection()
        print(f"\n‚úÖ Exemplo executado com sucesso!")
        print(f"\nüí° BENEF√çCIOS DA NOVA FUNCIONALIDADE:")
        print(f"   ‚úÖ Elimina respostas vazias com 'See the table'")
        print(f"   ‚úÖ Dados reais do Snowflake inclu√≠dos automaticamente")
        print(f"   ‚úÖ Formata√ß√£o leg√≠vel e profissional")
        print(f"   ‚úÖ N√£o requer interven√ß√£o manual do usu√°rio")
        print(f"   ‚úÖ Mant√©m compatibilidade com gr√°ficos e textos")
    else:
        print(f"\n‚ùå Falha na execu√ß√£o - verifique configura√ß√£o") 